"""Implementation of statechart elevator_st.
Generated by itemis CREATE code generator.
"""

import queue

class Elevator_st:
	"""Implementation of the state machine Elevator_st.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_elevator_system,
			main_region_elevator_system_control_current,
			main_region_elevator_system_control_up,
			main_region_elevator_system_control_down,
			main_region_elevator_system_control_idle,
			main_region_elevator_system_moving_moving_down,
			main_region_elevator_system_moving_arrived_down,
			main_region_elevator_system_moving_waiting_for_order,
			main_region_elevator_system_moving_arrived_up,
			main_region_elevator_system_moving_moving_up,
			main_region_elevator_system_door_closed_door,
			main_region_elevator_system_door_opened_door,
			main_region_elevator_system_fan_fan_off,
			main_region_elevator_system_fan_fan_on,
			main_region_elevator_system_stop_button_emergency_stop,
			main_region_elevator_system_stop_button_casual_work,
			main_region_elevator_system_display_display_floor,
			null_state
		) = range(18)


	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc.
		"""

		self.floor = None
		self.current_floor = None
		self.in_idle = None
		self.in_stop = None
		self.open_door = None
		self.close_door = None
		self.floor_selected = None
		self.fan_on = None
		self.fan_off = None
		self.move_up = None
		self.move_down = None
		self.back_to_idle = None
		self.back_to_order = None
		self.emergency_stop = None
		self.display_floor = None
		self.operation_callback = None

		self.in_event_queue = queue.Queue()
		# enumeration of all states:
		self.__State = Elevator_st.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 6
		for __state_index in range(6):
			self.__state_vector[__state_index] = self.State.null_state

		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 6

		# initializations:
		#Default init sequence for statechart elevator_st
		self.floor = 0
		self.current_floor = 0
		self.in_idle = False
		self.in_stop = False
		self.__is_executing = False
		self.__state_conf_vector_position = None

	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state or self.__state_vector[4] is not self.__State.null_state or self.__state_vector[5] is not self.__State.null_state

	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False

	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_elevator_system:
			return (self.__state_vector[0] >= self.__State.main_region_elevator_system)\
				and (self.__state_vector[0] <= self.__State.main_region_elevator_system_display_display_floor)
		if s == self.__State.main_region_elevator_system_control_current:
			return self.__state_vector[0] == self.__State.main_region_elevator_system_control_current
		if s == self.__State.main_region_elevator_system_control_up:
			return self.__state_vector[0] == self.__State.main_region_elevator_system_control_up
		if s == self.__State.main_region_elevator_system_control_down:
			return self.__state_vector[0] == self.__State.main_region_elevator_system_control_down
		if s == self.__State.main_region_elevator_system_control_idle:
			return self.__state_vector[0] == self.__State.main_region_elevator_system_control_idle
		if s == self.__State.main_region_elevator_system_moving_moving_down:
			return self.__state_vector[1] == self.__State.main_region_elevator_system_moving_moving_down
		if s == self.__State.main_region_elevator_system_moving_arrived_down:
			return self.__state_vector[1] == self.__State.main_region_elevator_system_moving_arrived_down
		if s == self.__State.main_region_elevator_system_moving_waiting_for_order:
			return self.__state_vector[1] == self.__State.main_region_elevator_system_moving_waiting_for_order
		if s == self.__State.main_region_elevator_system_moving_arrived_up:
			return self.__state_vector[1] == self.__State.main_region_elevator_system_moving_arrived_up
		if s == self.__State.main_region_elevator_system_moving_moving_up:
			return self.__state_vector[1] == self.__State.main_region_elevator_system_moving_moving_up
		if s == self.__State.main_region_elevator_system_door_closed_door:
			return self.__state_vector[2] == self.__State.main_region_elevator_system_door_closed_door
		if s == self.__State.main_region_elevator_system_door_opened_door:
			return self.__state_vector[2] == self.__State.main_region_elevator_system_door_opened_door
		if s == self.__State.main_region_elevator_system_fan_fan_off:
			return self.__state_vector[3] == self.__State.main_region_elevator_system_fan_fan_off
		if s == self.__State.main_region_elevator_system_fan_fan_on:
			return self.__state_vector[3] == self.__State.main_region_elevator_system_fan_fan_on
		if s == self.__State.main_region_elevator_system_stop_button_emergency_stop:
			return self.__state_vector[4] == self.__State.main_region_elevator_system_stop_button_emergency_stop
		if s == self.__State.main_region_elevator_system_stop_button_casual_work:
			return self.__state_vector[4] == self.__State.main_region_elevator_system_stop_button_casual_work
		if s == self.__State.main_region_elevator_system_display_display_floor:
				return self.__state_vector[5] == self.__State.main_region_elevator_system_display_display_floor
		return False

	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(6):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()

	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True

	def __execute_queued_event(self, func):
		func()

	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None

	def raise_open_door(self):
		"""Raise method for event open_door.
		"""
		self.in_event_queue.put(self.__raise_open_door_call)
		self.run_cycle()

	def __raise_open_door_call(self):
		"""Raise callback for event open_door.
		"""
		self.open_door = True

	def raise_close_door(self):
		"""Raise method for event close_door.
		"""
		self.in_event_queue.put(self.__raise_close_door_call)
		self.run_cycle()

	def __raise_close_door_call(self):
		"""Raise callback for event close_door.
		"""
		self.close_door = True

	def raise_floor_selected(self):
		"""Raise method for event floor_selected.
		"""
		self.in_event_queue.put(self.__raise_floor_selected_call)
		self.run_cycle()

	def __raise_floor_selected_call(self):
		"""Raise callback for event floor_selected.
		"""
		self.floor_selected = True

	def raise_fan_on(self):
		"""Raise method for event fan_on.
		"""
		self.in_event_queue.put(self.__raise_fan_on_call)
		self.run_cycle()

	def __raise_fan_on_call(self):
		"""Raise callback for event fan_on.
		"""
		self.fan_on = True

	def raise_fan_off(self):
		"""Raise method for event fan_off.
		"""
		self.in_event_queue.put(self.__raise_fan_off_call)
		self.run_cycle()

	def __raise_fan_off_call(self):
		"""Raise callback for event fan_off.
		"""
		self.fan_off = True

	def raise_move_up(self):
		"""Raise method for event move_up.
		"""
		self.in_event_queue.put(self.__raise_move_up_call)
		self.run_cycle()

	def __raise_move_up_call(self):
		"""Raise callback for event move_up.
		"""
		self.move_up = True

	def raise_move_down(self):
		"""Raise method for event move_down.
		"""
		self.in_event_queue.put(self.__raise_move_down_call)
		self.run_cycle()

	def __raise_move_down_call(self):
		"""Raise callback for event move_down.
		"""
		self.move_down = True

	def raise_back_to_idle(self):
		"""Raise method for event back_to_idle.
		"""
		self.in_event_queue.put(self.__raise_back_to_idle_call)
		self.run_cycle()

	def __raise_back_to_idle_call(self):
		"""Raise callback for event back_to_idle.
		"""
		self.back_to_idle = True

	def raise_back_to_order(self):
		"""Raise method for event back_to_order.
		"""
		self.in_event_queue.put(self.__raise_back_to_order_call)
		self.run_cycle()

	def __raise_back_to_order_call(self):
		"""Raise callback for event back_to_order.
		"""
		self.back_to_order = True

	def raise_emergency_stop(self):
		"""Raise method for event emergency_stop.
		"""
		self.in_event_queue.put(self.__raise_emergency_stop_call)
		self.run_cycle()

	def __raise_emergency_stop_call(self):
		"""Raise callback for event emergency_stop.
		"""
		self.emergency_stop = True

	def raise_display_floor(self):
		"""Raise method for event display_floor.
		"""
		self.in_event_queue.put(self.__raise_display_floor_call)
		self.run_cycle()

	def __raise_display_floor_call(self):
		"""Raise callback for event display_floor.
		"""
		self.display_floor = True

	def __entry_action_main_region_elevator_system_control_current(self):
		"""Entry action for state 'current'..
		"""
		#Entry action for state 'current'.
		self.timer_service.set_timer(self, 0, (1 * 1000), False)
		self.raise_open_door()

	def __entry_action_main_region_elevator_system_control_up(self):
		"""Entry action for state 'up'..
		"""
		#Entry action for state 'up'.
		self.raise_close_door()
		self.raise_move_up()

	def __entry_action_main_region_elevator_system_control_down(self):
		"""Entry action for state 'down'..
		"""
		#Entry action for state 'down'.
		self.raise_close_door()
		self.raise_move_down()

	def __entry_action_main_region_elevator_system_control_idle(self):
		"""Entry action for state 'Idle'..
		"""
		#Entry action for state 'Idle'.
		self.in_idle = True

	def __entry_action_main_region_elevator_system_moving_moving_down(self):
		"""Entry action for state 'Moving down'..
		"""
		#Entry action for state 'Moving down'.
		self.timer_service.set_timer(self, 1, (1 * 1000), False)
		self.current_floor = (self.current_floor - 1)
		self.raise_display_floor()

	def __entry_action_main_region_elevator_system_moving_arrived_down(self):
		"""Entry action for state 'arrived down'..
		"""
		#Entry action for state 'arrived down'.
		self.raise_open_door()
		self.raise_back_to_idle()
		self.raise_back_to_order()

	def __entry_action_main_region_elevator_system_moving_arrived_up(self):
		"""Entry action for state 'arrived up'..
		"""
		#Entry action for state 'arrived up'.
		self.raise_open_door()
		self.raise_back_to_idle()
		self.raise_back_to_order()

	def __entry_action_main_region_elevator_system_moving_moving_up(self):
		"""Entry action for state 'Moving up'..
		"""
		#Entry action for state 'Moving up'.
		self.timer_service.set_timer(self, 2, (1 * 1000), False)
		self.current_floor = (self.current_floor + 1)
		self.raise_display_floor()

	def __entry_action_main_region_elevator_system_door_opened_door(self):
		"""Entry action for state 'opened door'..
		"""
		#Entry action for state 'opened door'.
		self.timer_service.set_timer(self, 3, (5 * 1000), False)

	def __entry_action_main_region_elevator_system_fan_fan_on(self):
		"""Entry action for state 'Fan On'..
		"""
		#Entry action for state 'Fan On'.
		self.timer_service.set_timer(self, 4, (20 * 1000), True)

	def __entry_action_main_region_elevator_system_stop_button_emergency_stop(self):
		"""Entry action for state 'Emergency Stop'..
		"""
		#Entry action for state 'Emergency Stop'.
		self.timer_service.set_timer(self, 5, (2 * 1000), False)
		self.in_stop = True
		self.floor = self.current_floor
		self.raise_close_door()
		self.raise_back_to_idle()
		self.raise_back_to_order()

	def __entry_action_main_region_elevator_system_display_display_floor(self):
		"""Entry action for state 'Display Floor'..
		"""
		#Entry action for state 'Display Floor'.
		self.operation_callback.display(self.current_floor)

	def __exit_action_main_region_elevator_system_control_current(self):
		"""Exit action for state 'current'..
		"""
		#Exit action for state 'current'.
		self.timer_service.unset_timer(self, 0)

	def __exit_action_main_region_elevator_system_control_idle(self):
		"""Exit action for state 'Idle'..
		"""
		#Exit action for state 'Idle'.
		self.in_idle = False

	def __exit_action_main_region_elevator_system_moving_moving_down(self):
		"""Exit action for state 'Moving down'..
		"""
		#Exit action for state 'Moving down'.
		self.timer_service.unset_timer(self, 1)

	def __exit_action_main_region_elevator_system_moving_moving_up(self):
		"""Exit action for state 'Moving up'..
		"""
		#Exit action for state 'Moving up'.
		self.timer_service.unset_timer(self, 2)

	def __exit_action_main_region_elevator_system_door_opened_door(self):
		"""Exit action for state 'opened door'..
		"""
		#Exit action for state 'opened door'.
		self.timer_service.unset_timer(self, 3)

	def __exit_action_main_region_elevator_system_fan_fan_on(self):
		"""Exit action for state 'Fan On'..
		"""
		#Exit action for state 'Fan On'.
		self.timer_service.unset_timer(self, 4)

	def __exit_action_main_region_elevator_system_stop_button_emergency_stop(self):
		"""Exit action for state 'Emergency Stop'..
		"""
		#Exit action for state 'Emergency Stop'.
		self.timer_service.unset_timer(self, 5)
		self.in_stop = False

	def __enter_sequence_main_region_elevator_system_default(self):
		"""'default' enter sequence for state Elevator system.
		"""
		#'default' enter sequence for state Elevator system
		self.__enter_sequence_main_region_elevator_system_control_default()
		self.__enter_sequence_main_region_elevator_system_moving_default()
		self.__enter_sequence_main_region_elevator_system_door_default()
		self.__enter_sequence_main_region_elevator_system_fan_default()
		self.__enter_sequence_main_region_elevator_system_stop_button_default()
		self.__enter_sequence_main_region_elevator_system_display_default()

	def __enter_sequence_main_region_elevator_system_control_current_default(self):
		"""'default' enter sequence for state current.
		"""
		#'default' enter sequence for state current
		self.__entry_action_main_region_elevator_system_control_current()
		self.__state_vector[0] = self.State.main_region_elevator_system_control_current
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_control_up_default(self):
		"""'default' enter sequence for state up.
		"""
		#'default' enter sequence for state up
		self.__entry_action_main_region_elevator_system_control_up()
		self.__state_vector[0] = self.State.main_region_elevator_system_control_up
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_control_down_default(self):
		"""'default' enter sequence for state down.
		"""
		#'default' enter sequence for state down
		self.__entry_action_main_region_elevator_system_control_down()
		self.__state_vector[0] = self.State.main_region_elevator_system_control_down
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_control_idle_default(self):
		"""'default' enter sequence for state Idle.
		"""
		#'default' enter sequence for state Idle
		self.__entry_action_main_region_elevator_system_control_idle()
		self.__state_vector[0] = self.State.main_region_elevator_system_control_idle
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_moving_moving_down_default(self):
		"""'default' enter sequence for state Moving down.
		"""
		#'default' enter sequence for state Moving down
		self.__entry_action_main_region_elevator_system_moving_moving_down()
		self.__state_vector[1] = self.State.main_region_elevator_system_moving_moving_down
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_moving_arrived_down_default(self):
		"""'default' enter sequence for state arrived down.
		"""
		#'default' enter sequence for state arrived down
		self.__entry_action_main_region_elevator_system_moving_arrived_down()
		self.__state_vector[1] = self.State.main_region_elevator_system_moving_arrived_down
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_moving_waiting_for_order_default(self):
		"""'default' enter sequence for state waiting for order.
		"""
		#'default' enter sequence for state waiting for order
		self.__state_vector[1] = self.State.main_region_elevator_system_moving_waiting_for_order
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_moving_arrived_up_default(self):
		"""'default' enter sequence for state arrived up.
		"""
		#'default' enter sequence for state arrived up
		self.__entry_action_main_region_elevator_system_moving_arrived_up()
		self.__state_vector[1] = self.State.main_region_elevator_system_moving_arrived_up
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_moving_moving_up_default(self):
		"""'default' enter sequence for state Moving up.
		"""
		#'default' enter sequence for state Moving up
		self.__entry_action_main_region_elevator_system_moving_moving_up()
		self.__state_vector[1] = self.State.main_region_elevator_system_moving_moving_up
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_door_closed_door_default(self):
		"""'default' enter sequence for state closed door.
		"""
		#'default' enter sequence for state closed door
		self.__state_vector[2] = self.State.main_region_elevator_system_door_closed_door
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_door_opened_door_default(self):
		"""'default' enter sequence for state opened door.
		"""
		#'default' enter sequence for state opened door
		self.__entry_action_main_region_elevator_system_door_opened_door()
		self.__state_vector[2] = self.State.main_region_elevator_system_door_opened_door
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_fan_fan_off_default(self):
		"""'default' enter sequence for state Fan off.
		"""
		#'default' enter sequence for state Fan off
		self.__state_vector[3] = self.State.main_region_elevator_system_fan_fan_off
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_fan_fan_on_default(self):
		"""'default' enter sequence for state Fan On.
		"""
		#'default' enter sequence for state Fan On
		self.__entry_action_main_region_elevator_system_fan_fan_on()
		self.__state_vector[3] = self.State.main_region_elevator_system_fan_fan_on
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_stop_button_emergency_stop_default(self):
		"""'default' enter sequence for state Emergency Stop.
		"""
		#'default' enter sequence for state Emergency Stop
		self.__entry_action_main_region_elevator_system_stop_button_emergency_stop()
		self.__state_vector[4] = self.State.main_region_elevator_system_stop_button_emergency_stop
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_stop_button_casual_work_default(self):
		"""'default' enter sequence for state Casual Work.
		"""
		#'default' enter sequence for state Casual Work
		self.__state_vector[4] = self.State.main_region_elevator_system_stop_button_casual_work
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_elevator_system_display_display_floor_default(self):
		"""'default' enter sequence for state Display Floor.
		"""
		#'default' enter sequence for state Display Floor
		self.__entry_action_main_region_elevator_system_display_display_floor()
		self.__state_vector[5] = self.State.main_region_elevator_system_display_display_floor
		self.__state_conf_vector_position = 5
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		#'default' enter sequence for region main region
		self.__react_main_region__entry_default()

	def __enter_sequence_main_region_elevator_system_control_default(self):
		"""'default' enter sequence for region control.
		"""
		#'default' enter sequence for region control
		self.__react_main_region_elevator_system_control__entry_default()

	def __enter_sequence_main_region_elevator_system_moving_default(self):
		"""'default' enter sequence for region Moving.
		"""
		#'default' enter sequence for region Moving
		self.__react_main_region_elevator_system_moving__entry_default()

	def __enter_sequence_main_region_elevator_system_door_default(self):
		"""'default' enter sequence for region Door.
		"""
		#'default' enter sequence for region Door
		self.__react_main_region_elevator_system_door__entry_default()

	def __enter_sequence_main_region_elevator_system_fan_default(self):
		"""'default' enter sequence for region Fan.
		"""
		#'default' enter sequence for region Fan
		self.__react_main_region_elevator_system_fan__entry_default()

	def __enter_sequence_main_region_elevator_system_stop_button_default(self):
		"""'default' enter sequence for region Stop Button.
		"""
		#'default' enter sequence for region Stop Button
		self.__react_main_region_elevator_system_stop_button__entry_default()

	def __enter_sequence_main_region_elevator_system_display_default(self):
		"""'default' enter sequence for region Display.
		"""
		#'default' enter sequence for region Display
		self.__react_main_region_elevator_system_display__entry_default()

	def __exit_sequence_main_region_elevator_system_control_current(self):
		"""Default exit sequence for state current.
		"""
		#Default exit sequence for state current
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_elevator_system_control_current()

	def __exit_sequence_main_region_elevator_system_control_up(self):
		"""Default exit sequence for state up.
		"""
		#Default exit sequence for state up
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_elevator_system_control_down(self):
		"""Default exit sequence for state down.
		"""
		#Default exit sequence for state down
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_elevator_system_control_idle(self):
		"""Default exit sequence for state Idle.
		"""
		#Default exit sequence for state Idle
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_elevator_system_control_idle()

	def __exit_sequence_main_region_elevator_system_moving_moving_down(self):
		"""Default exit sequence for state Moving down.
		"""
		#Default exit sequence for state Moving down
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_elevator_system_moving_moving_down()

	def __exit_sequence_main_region_elevator_system_moving_arrived_down(self):
		"""Default exit sequence for state arrived down.
		"""
		#Default exit sequence for state arrived down
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_elevator_system_moving_waiting_for_order(self):
		"""Default exit sequence for state waiting for order.
		"""
		#Default exit sequence for state waiting for order
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_elevator_system_moving_arrived_up(self):
		"""Default exit sequence for state arrived up.
		"""
		#Default exit sequence for state arrived up
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_elevator_system_moving_moving_up(self):
		"""Default exit sequence for state Moving up.
		"""
		#Default exit sequence for state Moving up
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_elevator_system_moving_moving_up()

	def __exit_sequence_main_region_elevator_system_door_closed_door(self):
		"""Default exit sequence for state closed door.
		"""
		#Default exit sequence for state closed door
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2

	def __exit_sequence_main_region_elevator_system_door_opened_door(self):
		"""Default exit sequence for state opened door.
		"""
		#Default exit sequence for state opened door
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		self.__exit_action_main_region_elevator_system_door_opened_door()

	def __exit_sequence_main_region_elevator_system_fan_fan_off(self):
		"""Default exit sequence for state Fan off.
		"""
		#Default exit sequence for state Fan off
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_elevator_system_fan_fan_on(self):
		"""Default exit sequence for state Fan On.
		"""
		#Default exit sequence for state Fan On
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3
		self.__exit_action_main_region_elevator_system_fan_fan_on()

	def __exit_sequence_main_region_elevator_system_stop_button_emergency_stop(self):
		"""Default exit sequence for state Emergency Stop.
		"""
		#Default exit sequence for state Emergency Stop
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4
		self.__exit_action_main_region_elevator_system_stop_button_emergency_stop()

	def __exit_sequence_main_region_elevator_system_stop_button_casual_work(self):
		"""Default exit sequence for state Casual Work.
		"""
		#Default exit sequence for state Casual Work
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4

	def __exit_sequence_main_region_elevator_system_display_display_floor(self):
		"""Default exit sequence for state Display Floor.
		"""
		#Default exit sequence for state Display Floor
		self.__state_vector[5] = self.State.null_state
		self.__state_conf_vector_position = 5

	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		#Default exit sequence for region main region
		state = self.__state_vector[0]
		if state == self.State.main_region_elevator_system_control_current:
			self.__exit_sequence_main_region_elevator_system_control_current()
		elif state == self.State.main_region_elevator_system_control_up:
			self.__exit_sequence_main_region_elevator_system_control_up()
		elif state == self.State.main_region_elevator_system_control_down:
			self.__exit_sequence_main_region_elevator_system_control_down()
		elif state == self.State.main_region_elevator_system_control_idle:
			self.__exit_sequence_main_region_elevator_system_control_idle()
		state = self.__state_vector[1]
		if state == self.State.main_region_elevator_system_moving_moving_down:
			self.__exit_sequence_main_region_elevator_system_moving_moving_down()
		elif state == self.State.main_region_elevator_system_moving_arrived_down:
			self.__exit_sequence_main_region_elevator_system_moving_arrived_down()
		elif state == self.State.main_region_elevator_system_moving_waiting_for_order:
			self.__exit_sequence_main_region_elevator_system_moving_waiting_for_order()
		elif state == self.State.main_region_elevator_system_moving_arrived_up:
			self.__exit_sequence_main_region_elevator_system_moving_arrived_up()
		elif state == self.State.main_region_elevator_system_moving_moving_up:
			self.__exit_sequence_main_region_elevator_system_moving_moving_up()
		state = self.__state_vector[2]
		if state == self.State.main_region_elevator_system_door_closed_door:
			self.__exit_sequence_main_region_elevator_system_door_closed_door()
		elif state == self.State.main_region_elevator_system_door_opened_door:
			self.__exit_sequence_main_region_elevator_system_door_opened_door()
		state = self.__state_vector[3]
		if state == self.State.main_region_elevator_system_fan_fan_off:
			self.__exit_sequence_main_region_elevator_system_fan_fan_off()
		elif state == self.State.main_region_elevator_system_fan_fan_on:
			self.__exit_sequence_main_region_elevator_system_fan_fan_on()
		state = self.__state_vector[4]
		if state == self.State.main_region_elevator_system_stop_button_emergency_stop:
			self.__exit_sequence_main_region_elevator_system_stop_button_emergency_stop()
		elif state == self.State.main_region_elevator_system_stop_button_casual_work:
			self.__exit_sequence_main_region_elevator_system_stop_button_casual_work()
		state = self.__state_vector[5]
		if state == self.State.main_region_elevator_system_display_display_floor:
			self.__exit_sequence_main_region_elevator_system_display_display_floor()

	def __react_main_region_elevator_system_control__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_control_idle_default()

	def __react_main_region_elevator_system_moving__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_moving_waiting_for_order_default()

	def __react_main_region_elevator_system_door__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_door_closed_door_default()

	def __react_main_region_elevator_system_fan__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_fan_fan_off_default()

	def __react_main_region_elevator_system_stop_button__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_stop_button_casual_work_default()

	def __react_main_region_elevator_system_display__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_display_display_floor_default()

	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		#Default react sequence for initial entry
		self.__enter_sequence_main_region_elevator_system_default()

	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		#State machine reactions.
		return transitioned_before


	def __main_region_elevator_system_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_react function.
		"""
		#The reactions of state Elevator system.
		transitioned_after = transitioned_before
		#Always execute local reactions.
		transitioned_after = self.__react(transitioned_before)
		return transitioned_after


	def __main_region_elevator_system_control_current_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_control_current_react function.
		"""
		#The reactions of state current.
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[0]:
				self.__exit_sequence_main_region_elevator_system_control_current()
				self.__time_events[0] = False
				self.__enter_sequence_main_region_elevator_system_control_idle_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_elevator_system_control_up_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_control_up_react function.
		"""
		#The reactions of state up.
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.back_to_idle:
				self.__exit_sequence_main_region_elevator_system_control_up()
				self.__enter_sequence_main_region_elevator_system_control_idle_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_elevator_system_control_down_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_control_down_react function.
		"""
		#The reactions of state down.
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.back_to_idle:
				self.__exit_sequence_main_region_elevator_system_control_down()
				self.__enter_sequence_main_region_elevator_system_control_idle_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_elevator_system_control_idle_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_control_idle_react function.
		"""
		#The reactions of state Idle.
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if (self.floor_selected) and (self.floor == self.current_floor):
				self.__exit_sequence_main_region_elevator_system_control_idle()
				self.__enter_sequence_main_region_elevator_system_control_current_default()
				transitioned_after = 0
			elif (self.floor_selected) and (self.floor > self.current_floor):
				self.__exit_sequence_main_region_elevator_system_control_idle()
				self.__enter_sequence_main_region_elevator_system_control_up_default()
				transitioned_after = 0
			elif (self.floor_selected) and (self.floor < self.current_floor and self.current_floor >= 0):
				self.__exit_sequence_main_region_elevator_system_control_idle()
				self.__enter_sequence_main_region_elevator_system_control_down_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_elevator_system_moving_moving_down_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_moving_moving_down_react function.
		"""
		#The reactions of state Moving down.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.__time_events[1]) and (self.floor < self.current_floor):
				self.__exit_sequence_main_region_elevator_system_moving_moving_down()
				self.__time_events[1] = False
				self.__enter_sequence_main_region_elevator_system_moving_moving_down_default()
				transitioned_after = 1
			elif self.floor == self.current_floor:
				self.__exit_sequence_main_region_elevator_system_moving_moving_down()
				self.__enter_sequence_main_region_elevator_system_moving_arrived_down_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_elevator_system_moving_arrived_down_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_moving_arrived_down_react function.
		"""
		#The reactions of state arrived down.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.back_to_order:
				self.__exit_sequence_main_region_elevator_system_moving_arrived_down()
				self.__enter_sequence_main_region_elevator_system_moving_waiting_for_order_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_elevator_system_moving_waiting_for_order_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_moving_waiting_for_order_react function.
		"""
		#The reactions of state waiting for order.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.move_up:
				self.__exit_sequence_main_region_elevator_system_moving_waiting_for_order()
				self.__enter_sequence_main_region_elevator_system_moving_moving_up_default()
				transitioned_after = 1
			elif self.move_down:
				self.__exit_sequence_main_region_elevator_system_moving_waiting_for_order()
				self.__enter_sequence_main_region_elevator_system_moving_moving_down_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_elevator_system_moving_arrived_up_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_moving_arrived_up_react function.
		"""
		#The reactions of state arrived up.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.back_to_order:
				self.__exit_sequence_main_region_elevator_system_moving_arrived_up()
				self.__enter_sequence_main_region_elevator_system_moving_waiting_for_order_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_elevator_system_moving_moving_up_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_moving_moving_up_react function.
		"""
		#The reactions of state Moving up.
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.__time_events[2]) and (self.floor > self.current_floor):
				self.__exit_sequence_main_region_elevator_system_moving_moving_up()
				self.__time_events[2] = False
				self.__enter_sequence_main_region_elevator_system_moving_moving_up_default()
				transitioned_after = 1
			elif self.floor == self.current_floor:
				self.__exit_sequence_main_region_elevator_system_moving_moving_up()
				self.__enter_sequence_main_region_elevator_system_moving_arrived_up_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_elevator_system_door_closed_door_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_door_closed_door_react function.
		"""
		#The reactions of state closed door.
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if (self.open_door) and (not self.in_stop):
				self.__exit_sequence_main_region_elevator_system_door_closed_door()
				self.__enter_sequence_main_region_elevator_system_door_opened_door_default()
				transitioned_after = 2
		return transitioned_after


	def __main_region_elevator_system_door_opened_door_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_door_opened_door_react function.
		"""
		#The reactions of state opened door.
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.__time_events[3]:
				self.__exit_sequence_main_region_elevator_system_door_opened_door()
				self.__time_events[3] = False
				self.__enter_sequence_main_region_elevator_system_door_closed_door_default()
				transitioned_after = 2
			elif self.close_door:
				self.__exit_sequence_main_region_elevator_system_door_opened_door()
				self.__enter_sequence_main_region_elevator_system_door_closed_door_default()
				transitioned_after = 2
		return transitioned_after


	def __main_region_elevator_system_fan_fan_off_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_fan_fan_off_react function.
		"""
		#The reactions of state Fan off.
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if self.fan_on:
				self.__exit_sequence_main_region_elevator_system_fan_fan_off()
				self.__enter_sequence_main_region_elevator_system_fan_fan_on_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_elevator_system_fan_fan_on_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_fan_fan_on_react function.
		"""
		#The reactions of state Fan On.
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if self.fan_off:
				self.__exit_sequence_main_region_elevator_system_fan_fan_on()
				self.__enter_sequence_main_region_elevator_system_fan_fan_off_default()
				transitioned_after = 3
			elif (self.__time_events[4]) and (self.in_idle):
				self.__exit_sequence_main_region_elevator_system_fan_fan_on()
				self.__time_events[4] = False
				self.__enter_sequence_main_region_elevator_system_fan_fan_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_elevator_system_stop_button_emergency_stop_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_stop_button_emergency_stop_react function.
		"""
		#The reactions of state Emergency Stop.
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if self.__time_events[5]:
				self.__exit_sequence_main_region_elevator_system_stop_button_emergency_stop()
				self.__time_events[5] = False
				self.__enter_sequence_main_region_elevator_system_stop_button_casual_work_default()
				transitioned_after = 4
		return transitioned_after


	def __main_region_elevator_system_stop_button_casual_work_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_stop_button_casual_work_react function.
		"""
		#The reactions of state Casual Work.
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if self.emergency_stop:
				self.__exit_sequence_main_region_elevator_system_stop_button_casual_work()
				self.__enter_sequence_main_region_elevator_system_stop_button_emergency_stop_default()
				transitioned_after = 4
		return transitioned_after


	def __main_region_elevator_system_display_display_floor_react(self, transitioned_before):
		"""Implementation of __main_region_elevator_system_display_display_floor_react function.
		"""
		#The reactions of state Display Floor.
		transitioned_after = transitioned_before
		if transitioned_after < 5:
			if self.display_floor:
				self.__exit_sequence_main_region_elevator_system_display_display_floor()
				self.__enter_sequence_main_region_elevator_system_display_display_floor_default()
				self.__main_region_elevator_system_react(0)
				transitioned_after = 5
		#If no transition was taken
		if transitioned_after == transitioned_before:
			#then execute local reactions.
			transitioned_after = self.__main_region_elevator_system_react(transitioned_before)
		return transitioned_after


	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.open_door = False
		self.close_door = False
		self.floor_selected = False
		self.fan_on = False
		self.fan_off = False
		self.move_up = False
		self.move_down = False
		self.back_to_idle = False
		self.back_to_order = False
		self.emergency_stop = False
		self.display_floor = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
		self.__time_events[4] = False
		self.__time_events[5] = False


	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_elevator_system_control_current:
			transitioned = self.__main_region_elevator_system_control_current_react(transitioned)
		elif state == self.State.main_region_elevator_system_control_up:
			transitioned = self.__main_region_elevator_system_control_up_react(transitioned)
		elif state == self.State.main_region_elevator_system_control_down:
			transitioned = self.__main_region_elevator_system_control_down_react(transitioned)
		elif state == self.State.main_region_elevator_system_control_idle:
			transitioned = self.__main_region_elevator_system_control_idle_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_elevator_system_moving_moving_down:
				transitioned = self.__main_region_elevator_system_moving_moving_down_react(transitioned)
			elif state == self.State.main_region_elevator_system_moving_arrived_down:
				transitioned = self.__main_region_elevator_system_moving_arrived_down_react(transitioned)
			elif state == self.State.main_region_elevator_system_moving_waiting_for_order:
				transitioned = self.__main_region_elevator_system_moving_waiting_for_order_react(transitioned)
			elif state == self.State.main_region_elevator_system_moving_arrived_up:
				transitioned = self.__main_region_elevator_system_moving_arrived_up_react(transitioned)
			elif state == self.State.main_region_elevator_system_moving_moving_up:
				transitioned = self.__main_region_elevator_system_moving_moving_up_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_elevator_system_door_closed_door:
				transitioned = self.__main_region_elevator_system_door_closed_door_react(transitioned)
			elif state == self.State.main_region_elevator_system_door_opened_door:
				transitioned = self.__main_region_elevator_system_door_opened_door_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_elevator_system_fan_fan_off:
				transitioned = self.__main_region_elevator_system_fan_fan_off_react(transitioned)
			elif state == self.State.main_region_elevator_system_fan_fan_on:
				transitioned = self.__main_region_elevator_system_fan_fan_on_react(transitioned)
		if self.__state_conf_vector_position < 4:
			state = self.__state_vector[4]
			if state == self.State.main_region_elevator_system_stop_button_emergency_stop:
				transitioned = self.__main_region_elevator_system_stop_button_emergency_stop_react(transitioned)
			elif state == self.State.main_region_elevator_system_stop_button_casual_work:
				transitioned = self.__main_region_elevator_system_stop_button_casual_work_react(transitioned)
		if self.__state_conf_vector_position < 5:
			state = self.__state_vector[5]
			if state == self.State.main_region_elevator_system_display_display_floor:
				self.__main_region_elevator_system_display_display_floor_react(transitioned)


	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		#Performs a 'run to completion' step.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')

		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")

		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			condition_0 = False
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
				condition_0 = True
		self.__is_executing = False


	def enter(self):
		"""Implementation of enter function.
		"""
		#Activates the state machine.
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')

		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")

		if self.__is_executing:
			return
		self.__is_executing = True
		#Default enter sequence for statechart elevator_st
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		#Deactivates the state machine.
		if self.__is_executing:
			return
		self.__is_executing = True
		#Default exit sequence for statechart elevator_st
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	def trigger_without_event(self):
		"""Implementation of triggerWithoutEvent function.
		"""
		self.run_cycle()
	
